res = 0.0025
# create raster for study area
r = raster::raster(ext = raster::extent(lon1, lon2, lat2, lat1), resolution = res) #resolution in degrees
r
plot(r)
raster::values(r) = 1:raster::ncell(r)
# make coral cover raster : not used
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
# Read 3 shapefiles of new caledonia mpas
shp0 <- rgdal::readOGR(dsn = here::here("data/mpas/shp_0", "WDPA_WDOECM_Mar2021_Public_NCL_shp-polygons.shp"))
shp1 <- rgdal::readOGR(dsn = here::here("data/mpas/shp_1", "WDPA_WDOECM_Mar2021_Public_NCL_shp-polygons.shp"))
shp2 <- rgdal::readOGR(dsn = here::here("data/mpas/shp_2", "WDPA_WDOECM_Mar2021_Public_NCL_shp-polygons.shp"))
# Merge
shp = rbind(shp0, shp1, shp2)
shp
###### Map coral polygons
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l1_attrib", "small")
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l2_attrib", "small")
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l3_attrib", "small")
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l4_attrib", "small")
#map telemetry with separate map per date
map_telemetry_date_separate_on_off(maplatlon_sm, telemetry_poe, telemetry_poe_on, "small", just_poe = TRUE)
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
#map telemetry with separate map per date
map_telemetry_date_separate_on_off(maplatlon_sm, telemetry_poe, telemetry_poe_on, "small", just_poe = TRUE)
##### Map MPAs : not used
reserveffect::map_mpa(maplatlon_sm, mpa, "small")
###### telemetry with all species Poe on effort
reserveffect::map_all_species_telemetry_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
###### telemetry with individual species Poe on effort
reserveffect::map_indiv_species_telemetry_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
###### telemetry with individual species with separate map per species Poe on effort
reserveffect::map_indiv_species_telemetry_separate_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
###### telemetry with one color per date Poe on effort
reserveffect::map_telemetry_date_poe_on(maplatlon_sm, telemetry_poe_on)
###### telemetry with separate map per date Poe on effort
reserveffect::map_telemetry_date_separate_poe_on(maplatlon_sm, telemetry_poe_on)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
###### telemetry with all species Poe on effort
reserveffect::map_all_species_telemetry_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
#load all functions
devtools::load_all()
#load all functions
devtools::load_all()
######################################## DEFINE STUDY AREA ########################################
#Define study area coordnates
#small region
lat1_sm =  -21.52 ; lat2_sm = -21.65
lon1_sm = 165.225 ; lon2_sm = 165.45
#big region
lat1_bg =  -21.2 ; lat2_bg = -22
lon1_bg = 164.6 ; lon2_bg = 166
#australia + nc
lat1_nc = -42 ; lat2_nc = -8.5
lon1_nc = 115 ; lon2_nc = 170
######################################## CALCULATE FLIGHT PARAMETERS ########################################
#image footprint
mean_altitude = 47 # in meters (in ft: 155) from ulm altimeter (gopro altitude unreliable)
fov = 86.7 # field of view in degrees from gopro hero 7 black manual
footprint_width = 2 * tanpi(fov / (2*180)) * mean_altitude # in meters, trigonometry formula
image_height = 1520 #in pixels (2.7k gopro format)
image_width = 2704 #in pixels (2.7k gopro format)
footprint_height = footprint_width * image_height/image_width #in meters
#overlap between successive images (given hyp of linear flight)
mean_speed = 30.55 # in m/s (in km/h: 110) from ulm
frame_per_s = 3 # extraction rate in megafauna-project
overlap = (mean_speed / frame_per_s) / footprint_height
######################################## READ and CLEAN TELEMETRY DATA ########################################
#read telemetry data
telemetry_all = reserveffect::read_telem()
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
#Read video information from google sheets (informations_video_ulm_news)
videos = reserveffect::read_video_info()
#Clean video information : select only DATE, VIDEO_ID, EFFORT_POE
videos = reserveffect::clean_video_info(videos)
#Join video information to telemetry
telemetry = reserveffect::join_video_info_telem(videos, telemetry)
#Clean duplicated obs from telemetry (takes about 20 minutes to process)
telemetry_obs = reserveffect::clean_duplicated_obs_telemetry(telemetry, overlap, image_height)
#Get list of Poe videos
ls_poe_videos = reserveffect::list_poe_videos(videos)
#select video information for Poe
videos_poe = reserveffect::select_poe_videos(videos, ls_poe_videos)
#Join video information to telemetry
telemetry_poe = reserveffect::join_video_poe_info_telem(videos_poe, telemetry)
#select obs for Poe
telemetry_obs_poe = reserveffect::select_obs_telemetry_poe(telemetry_obs, ls_poe_videos)
#count total number of individuals observed per species
telemetry_obs_poe %>%
dplyr::group_by(object) %>%
dplyr::summarise(n_tot = dplyr::n())
#read images png
img_Dugong_certain = reserveffect::read_megafauna_image("Dugong_certain")
img_Turtle = reserveffect::read_megafauna_image("Turtle")
img_Shark = reserveffect::read_megafauna_image("Shark")
img_Round_ray = reserveffect::read_megafauna_image("Round_ray")
img_Eagle_ray = reserveffect::read_megafauna_image("Eagle_ray")
######################################## READ CORAL DATA ########################################
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
#read Allen coral benthic : used
allen_coral_poly = reserveffect::read_crop_and_convert_allen_coralnc_benthic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
#read Allen coral geomorphic : not used
allen_coral_poly_geomorphic = reserveffect::read_crop_and_convert_allen_coralnc_geomorphic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
# make coral cover raster : not used
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
######################################## READ MPA DATA ########################################
# read mpa polygon
mpa = reserveffect::read_mpanc()
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
######################################## READ TRANSECT DATA ########################################
points1 = reserveffect::read_transects_points("megafauna1_points_latlon")
library(sp)
pts = points1
sector = "1"
#reproject to wgs84
crs_wgs84 <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
pts2 <- sp::spTransform(pts, crs_wgs84)
#order based on id
pts2@data$id = as.numeric(pts2@data$id)
new = pts2@data[order(pts2@data$id),]
coordinates(new) <- ~ xcoord + ycoord
#add id_line
if (sector == "1") {
new$id_line = paste0("1_", c(rep(1:24, each=2)))
}
if (sector == "2") {
new$id_line = paste0("2_", c(rep(1:33, each=2), 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 41, 42, 41, 42,
43, 44, 43, 44, 45, 46, 45, 46, 47, 48, 47, 48, 49, 50, 49, 50,
51, 52, 51, 52, 53, 54, 53, 54, 55, 56, 55, 56,
57, 58, 57, 58, 59, 60, 59, 60, 61))
}
if (sector == "3") {
new$id_line = paste0("3_", rep(1:168, each=2))
}
#list of Lines per id, each with one Line in a list ********does not work inside function********
x <- lapply(split(new, new$id_line), function(x) Lines(list(Line(coordinates(x))), x$id_line[1L]))
#make spatial lines
lns <- SpatialLines(x)
#make dataframe for the lines groupes by id
data <- data.frame(id = unique(new$id_line))
rownames(data) <- data$id
#make spatial lines data frame
l <- SpatialLinesDataFrame(lns, data)
lines1 = l
####### OSM maps
maplatlon_sm = reserveffect::osm_map(lat1_sm, lon1_sm, lat2_sm, lon2_sm) #bing (satellite view)
###################################### SELECT ON EFFORT TELEMETRY FOR POE #####################################
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
############################################ MAKE DENSITY MAPS ON REGULAR GRID POE ON EFFORT #############################################################
#project osm for density mapping
maplatlon_sm_proj = reserveffect::osm_mapproj(maplatlon_sm)
#make study area grid
grid_sm = reserveffect::make_grid(rast_sm)
#grid cell area
#sf::st_area(grid_sm)
#restrict telemetry to dates
dates = c("2021-07-24", "2021-07-29", "2021-08-08", "2021-08-21", '2021-09-05', "2021-09-12",
"2021-09-14", "2021-10-06", "2021-10-18", "2021-10-23", "2021-10-31", "2021-11-06", "2021-11-10",
"2021-11-11", "2021-11-14", "2021-11-16", "2021-11-23", "2021-11-24", "2021-11-26", "2021-11-29")
telemetry_poe_on = reserveffect::restrict_telem_dates(telemetry_poe_on, dates)
telem = telemetry_poe_on
library(sp)
#set coords
coordinates(telem) = ~ lon + lat
# list of Lines per date, each with one Line in a list
# ***** does not work in function
listlines = lapply(split(telem, telem$date), function(x) Lines(list(Line(coordinates(x))), x$date[1L]))
list_lines = listlines
### Track length
#Sum length of tracks (m) in grid cells per date
grid_tracks_per_date = reserveffect::sum_length_per_grid_per_date(grid_sm, list_lines, dates)
#Total surveyed length
sum(grid_tracks_per_date$length, na.rm=T) #1553071 m
#Mean surveyed length per survey date
sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #77654 m
#Total surveyed area
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) # 137813538 m2
#Mean surveyed area per survey date
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #6890677 m
#
### Observations
#Count total number of observations per grid cell per date
grid_obs_per_date = reserveffect::count_obs_per_grid_per_date(grid_sm, telemetry_obs_poe_on)
### Observations
#Count total number of observations per coral polygon per date
coral_obs_per_date = reserveffect::count_obs_per_coral_poly_per_date(coral_poly, telemetry_obs_poe_on)
############################################ DENSITY COMPARISONS #############################################################
#Make dataframe per grid cell centers (including empty cell centers) of observations, track length and densities per date and per species for POe
df_all_species = reserveffect::make_df_all_species_poe(grid_obs_per_date, grid_tracks_per_date, footprint_width)
# intersect density dataframe with coral and mpa status
# NB dataframe points are intersected with polygons
df_all_species_coral = reserveffect::intersect_df_coral_poly(df_all_species, coral_poly)
df_all_species_allen_coral = reserveffect::intersect_df_allen_coral_poly(df_all_species_coral, allen_coral_poly)
df_all_species_coral_mpa = reserveffect::intersect_df_mpa_poly(df_all_species_coral, mpa_poe)
df_all_species_allen_coral_mpa = reserveffect::intersect_df_mpa_allen_poly(df_all_species_allen_coral, mpa_poe)
reserveffect::map_dens_per_grid_species_poe_with_megafauna_image_log_with_zero(maplatlon_sm_proj, grid_obs_per_date, grid_tracks_per_date, footprint_width, "Dugong_certain", mpa_poe, img_Dugong_certain)
reserveffect::map_dens_per_grid_species_poe_with_megafauna_image_log_with_zero(maplatlon_sm_proj, grid_obs_per_date, grid_tracks_per_date, footprint_width, "Turtle", mpa_poe, img_Turtle)
reserveffect::map_dens_per_grid_species_poe_with_megafauna_image_log_with_zero(maplatlon_sm_proj, grid_obs_per_date, grid_tracks_per_date, footprint_width, "Shark", mpa_poe, img_Shark)
reserveffect::map_dens_per_grid_species_poe_with_megafauna_image_log_with_zero(maplatlon_sm_proj, grid_obs_per_date, grid_tracks_per_date, footprint_width, "Round_ray", mpa_poe, img_Round_ray)
reserveffect::map_dens_per_grid_species_poe_with_megafauna_image_log_with_zero(maplatlon_sm_proj, grid_obs_per_date, grid_tracks_per_date, footprint_width, "Eagle_ray", mpa_poe, img_Eagle_ray)
map_nbr_survey_with_sightings_per_pixels(maplatlon_sm_proj, grid_tracks_per_date, grid_obs_per_date, "Dugong_certain", mpa_poe, img_Dugong_certain)
map_nbr_survey_with_sightings_per_pixels(maplatlon_sm_proj, grid_tracks_per_date, grid_obs_per_date, "Turtle", mpa_poe, img_Turtle)
map_nbr_survey_with_sightings_per_pixels(maplatlon_sm_proj, grid_tracks_per_date, grid_obs_per_date, "Shark", mpa_poe, img_Shark)
map_nbr_survey_with_sightings_per_pixels(maplatlon_sm_proj, grid_tracks_per_date, grid_obs_per_date, "Round_ray", mpa_poe, img_Round_ray)
map_nbr_survey_with_sightings_per_pixels(maplatlon_sm_proj, grid_tracks_per_date, grid_obs_per_date, "Eagle_ray", mpa_poe, img_Eagle_ray)
#mpa : not used
reserveffect::barplot_density_mpa(df_all_species_coral_mpa, "Dugong_certain")
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Turtle", img_Turtle)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Shark", img_Shark)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Round_ray", img_Round_ray)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Eagle_ray", img_Eagle_ray)
#habitat + mpa : used : Figure 3.F
permanova_barplot_allen_coral_mpa_with_all_species_habitat_mpa(df_all_species_allen_coral_mpa, "Dugong_certain", "Turtle", "Shark", "Round_ray", "Eagle_ray")
#load all functions
devtools::load_all()
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
#load all functions
devtools::load_all()
######################################## DEFINE STUDY AREA ########################################
#Define study area coordnates
#small region
lat1_sm =  -21.52 ; lat2_sm = -21.65
lon1_sm = 165.225 ; lon2_sm = 165.45
#big region
lat1_bg =  -21.2 ; lat2_bg = -22
lon1_bg = 164.6 ; lon2_bg = 166
#australia + nc
lat1_nc = -42 ; lat2_nc = -8.5
lon1_nc = 115 ; lon2_nc = 170
######################################## CALCULATE FLIGHT PARAMETERS ########################################
#image footprint
mean_altitude = 47 # in meters (in ft: 155) from ulm altimeter (gopro altitude unreliable)
fov = 86.7 # field of view in degrees from gopro hero 7 black manual
footprint_width = 2 * tanpi(fov / (2*180)) * mean_altitude # in meters, trigonometry formula
image_height = 1520 #in pixels (2.7k gopro format)
image_width = 2704 #in pixels (2.7k gopro format)
footprint_height = footprint_width * image_height/image_width #in meters
#overlap between successive images (given hyp of linear flight)
mean_speed = 30.55 # in m/s (in km/h: 110) from ulm
frame_per_s = 3 # extraction rate in megafauna-project
overlap = (mean_speed / frame_per_s) / footprint_height
######################################## READ and CLEAN TELEMETRY DATA ########################################
#read telemetry data
telemetry_all = reserveffect::read_telem()
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
#Read video information from google sheets (informations_video_ulm_news)
videos = reserveffect::read_video_info()
#Clean video information : select only DATE, VIDEO_ID, EFFORT_POE
videos = reserveffect::clean_video_info(videos)
#Join video information to telemetry
telemetry = reserveffect::join_video_info_telem(videos, telemetry)
#Clean duplicated obs from telemetry (takes about 20 minutes to process)
telemetry_obs = reserveffect::clean_duplicated_obs_telemetry(telemetry, overlap, image_height)
#Get list of Poe videos
ls_poe_videos = reserveffect::list_poe_videos(videos)
#select video information for Poe
videos_poe = reserveffect::select_poe_videos(videos, ls_poe_videos)
#Join video information to telemetry
telemetry_poe = reserveffect::join_video_poe_info_telem(videos_poe, telemetry)
#select obs for Poe
telemetry_obs_poe = reserveffect::select_obs_telemetry_poe(telemetry_obs, ls_poe_videos)
#count total number of individuals observed per species
telemetry_obs_poe %>%
dplyr::group_by(object) %>%
dplyr::summarise(n_tot = dplyr::n())
#read images png
img_Dugong_certain = reserveffect::read_megafauna_image("Dugong_certain")
img_Turtle = reserveffect::read_megafauna_image("Turtle")
img_Shark = reserveffect::read_megafauna_image("Shark")
img_Round_ray = reserveffect::read_megafauna_image("Round_ray")
img_Eagle_ray = reserveffect::read_megafauna_image("Eagle_ray")
######################################## READ CORAL DATA ########################################
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
#read Allen coral benthic : used
allen_coral_poly = reserveffect::read_crop_and_convert_allen_coralnc_benthic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
#read Allen coral geomorphic : not used
allen_coral_poly_geomorphic = reserveffect::read_crop_and_convert_allen_coralnc_geomorphic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
# make coral cover raster : not used
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
######################################## READ MPA DATA ########################################
# read mpa polygon
mpa = reserveffect::read_mpanc()
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
######################################## READ TRANSECT DATA ########################################
points1 = reserveffect::read_transects_points("megafauna1_points_latlon")
library(sp)
pts = points1
sector = "1"
#reproject to wgs84
crs_wgs84 <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
pts2 <- sp::spTransform(pts, crs_wgs84)
#order based on id
pts2@data$id = as.numeric(pts2@data$id)
new = pts2@data[order(pts2@data$id),]
coordinates(new) <- ~ xcoord + ycoord
#add id_line
if (sector == "1") {
new$id_line = paste0("1_", c(rep(1:24, each=2)))
}
if (sector == "2") {
new$id_line = paste0("2_", c(rep(1:33, each=2), 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 41, 42, 41, 42,
43, 44, 43, 44, 45, 46, 45, 46, 47, 48, 47, 48, 49, 50, 49, 50,
51, 52, 51, 52, 53, 54, 53, 54, 55, 56, 55, 56,
57, 58, 57, 58, 59, 60, 59, 60, 61))
}
if (sector == "3") {
new$id_line = paste0("3_", rep(1:168, each=2))
}
#list of Lines per id, each with one Line in a list ********does not work inside function********
x <- lapply(split(new, new$id_line), function(x) Lines(list(Line(coordinates(x))), x$id_line[1L]))
#make spatial lines
lns <- SpatialLines(x)
#make dataframe for the lines groupes by id
data <- data.frame(id = unique(new$id_line))
rownames(data) <- data$id
#make spatial lines data frame
l <- SpatialLinesDataFrame(lns, data)
lines1 = l
####### OSM maps
maplatlon_sm = reserveffect::osm_map(lat1_sm, lon1_sm, lat2_sm, lon2_sm) #bing (satellite view)
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
############################################ MAKE DENSITY MAPS ON REGULAR GRID POE ON EFFORT #############################################################
#project osm for density mapping
maplatlon_sm_proj = reserveffect::osm_mapproj(maplatlon_sm)
#make study area grid
grid_sm = reserveffect::make_grid(rast_sm)
#grid cell area
#sf::st_area(grid_sm)
#restrict telemetry to dates
dates = c("2021-07-24", "2021-07-29", "2021-08-08", "2021-08-21", '2021-09-05', "2021-09-12",
"2021-09-14", "2021-10-06", "2021-10-18", "2021-10-23", "2021-10-31", "2021-11-06", "2021-11-10",
"2021-11-11", "2021-11-14", "2021-11-16", "2021-11-23", "2021-11-24", "2021-11-26", "2021-11-29")
telemetry_poe_on = reserveffect::restrict_telem_dates(telemetry_poe_on, dates)
library(sp)
#set coords
coordinates(telem) = ~ lon + lat
# list of Lines per date, each with one Line in a list
# ***** does not work in function
listlines = lapply(split(telem, telem$date), function(x) Lines(list(Line(coordinates(x))), x$date[1L]))
telem = telemetry_poe_on
library(sp)
#set coords
coordinates(telem) = ~ lon + lat
# list of Lines per date, each with one Line in a list
# ***** does not work in function
listlines = lapply(split(telem, telem$date), function(x) Lines(list(Line(coordinates(x))), x$date[1L]))
list_lines = listlines
### Track length
#Sum length of tracks (m) in grid cells per date
grid_tracks_per_date = reserveffect::sum_length_per_grid_per_date(grid_sm, list_lines, dates)
#Total surveyed length
sum(grid_tracks_per_date$length, na.rm=T) #1553071 m
#Mean surveyed length per survey date
sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #77654 m
#Total surveyed area
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) # 137813538 m2
#Mean surveyed area per survey date
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #6890677 m
### Observations
#Count total number of observations per grid cell per date
grid_obs_per_date = reserveffect::count_obs_per_grid_per_date(grid_sm, telemetry_obs_poe_on)
### Observations
#Count total number of observations per coral polygon per date
coral_obs_per_date = reserveffect::count_obs_per_coral_poly_per_date(coral_poly, telemetry_obs_poe_on)
#Map number of species observations per coral polygon (all dates) : not used
#***need to add open sea polygon
reserveffect::map_obs_per_coral_poly_species_poe(maplatlon_sm_proj, coral_obs_per_date, "Dugong_certain")
############################################ DENSITY COMPARISONS #############################################################
#Make dataframe per grid cell centers (including empty cell centers) of observations, track length and densities per date and per species for POe
df_all_species = reserveffect::make_df_all_species_poe(grid_obs_per_date, grid_tracks_per_date, footprint_width)
# intersect density dataframe with coral and mpa status
# NB dataframe points are intersected with polygons
df_all_species_coral = reserveffect::intersect_df_coral_poly(df_all_species, coral_poly)
df_all_species_allen_coral = reserveffect::intersect_df_allen_coral_poly(df_all_species_coral, allen_coral_poly)
df_all_species_coral_mpa = reserveffect::intersect_df_mpa_poly(df_all_species_coral, mpa_poe)
df_all_species_allen_coral_mpa = reserveffect::intersect_df_mpa_allen_poly(df_all_species_allen_coral, mpa_poe)
maplatlonproj = maplatlon_sm_proj
polyobs = grid_obs_per_date
polytracks = grid_tracks_per_date
footprintwidth = footprint_width
species = "Dugong_certain"
pa = mpa_poe
img = img_Dugong_certain
# select polygons with counts of species
polyobs2 = polyobs %>%
dplyr::filter(object == species)
# convert back to spatial object for plotting
polyobs3 = sf::as_Spatial(polyobs2)
# make dataframe for plotting
counts = data.frame(id = polyobs3$id,
count = polyobs3$n,
date = polyobs3$date,
lon = coordinates(polyobs3)[,1],
lat = coordinates(polyobs3)[,2])
#IMPORTANT to sum counts per cell across all flights
counts2 = counts %>%
dplyr::group_by(id, lat, lon) %>%
dplyr::summarise(tot_count = sum(count)) %>%
dplyr::filter(tot_count > 0)
# convert back to spatial object for plotting (in meters)
polytracks2 = sf::as_Spatial(polytracks)
# make dataframe for plotting
effort = data.frame(id = polytracks2$id,
length = as.numeric(polytracks2$length), #convert class units to numeric
lon = coordinates(polytracks2)[,1],
lat = coordinates(polytracks2)[,2])
# sum length per grid cell and select polygons with effort > 0
effort2 = effort %>%
dplyr::group_by(id, lat, lon) %>%
dplyr::summarise(tot_length = sum(length)) %>% #IMPORTANT to sum lenght per cell across all flights
dplyr::filter(tot_length > 0)
# merge effort and counts based on polygon id and calculate density
result = counts2 %>%
dplyr::left_join(effort2, by = "id") %>%
dplyr::mutate(density = tot_count / (tot_length*footprintwidth))  %>% #density in indiv/m2
dplyr::mutate(density = density * 10000)  %>%  #density in indiv/ha (1 ha = 10000m2 - 1m2 = 10-4 ha)
dplyr::rename(lon = lon.x, lat = lat.x) %>%
dplyr::select(-lat.y, -lon.y)
View(result)
View(effort2)
View(counts2)
View(effort)
map = OpenStreetMap::autoplot.OpenStreetMap(maplatlonproj) + ggplot2::geom_point(data = effort, ggplot2::aes(x = lon, y = lat), color = "white", shape = 15, size=1.5, alpha = 0.4)
map
map = OpenStreetMap::autoplot.OpenStreetMap(maplatlonproj) + ggplot2::geom_point(data = effort, ggplot2::aes(x = lon, y = lat), color = "blue", shape = 15, size=1.5, alpha = 0.4)
map
map = OpenStreetMap::autoplot.OpenStreetMap(maplatlonproj) + ggplot2::geom_point(data = effort, ggplot2::aes(x = lon, y = lat), color = "blue", shape = 10, size=1.5, alpha = 0.4)
ma
map
map = OpenStreetMap::autoplot.OpenStreetMap(maplatlonproj) + ggplot2::geom_point(data = effort, ggplot2::aes(x = lon, y = lat), color = "blue", shape = 15, size=3, alpha = 0.4)
map
map = OpenStreetMap::autoplot.OpenStreetMap(maplatlonproj) + ggplot2::geom_point(data = effort, ggplot2::aes(x = lon, y = lat), color = "blue", shape = 15, size=1.5, alpha = 0.4)
map
effort %>% dplyr::filter(length = NA) -> effort_test
View(effort_test)
effort %>% dplyr::filter(length = "NA") -> effort_test
effort %>% dplyr::filter(length = Na) -> effort_test
effort %>% dplyr::filter(length < 0) -> effort_test
View(effort_test)
effort %>% dplyr::group_by(id, lat, lon) %>% dplyr::filter(length > 0) -> effort_test
View(effort_test)
map = OpenStreetMap::autoplot.OpenStreetMap(maplatlonproj) + ggplot2::geom_point(data = effort_test, ggplot2::aes(x = lon, y = lat), color = "blue", shape = 15, size=1.5, alpha = 0.4)
map
View(grid_obs_per_date)
#Map number of species observations per grid cell per date : not used
reserveffect::map_obs_per_grid_per_date_species_poe(maplatlon_sm_proj, grid_obs_per_date, "Dugong_certain")
reserveffect::map_obs_per_grid_per_date_species_poe(maplatlon_sm_proj, grid_obs_per_date, "Shark")

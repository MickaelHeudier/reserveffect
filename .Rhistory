img_Eagle_ray = reserveffect::read_megafauna_image("Eagle_ray")
######################################## READ CORAL DATA ########################################
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
#read Allen coral geomorpology polygons benthic
allen_coral_poly = reserveffect::read_crop_and_convert_allen_coralnc_benthic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
#read Allen coral geomorpology polygons geomorphic
allen_coral_poly_geomorphic = reserveffect::read_crop_and_convert_allen_coralnc_geomorphic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
# make coral cover raster
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
######################################## READ MPA DATA ########################################
# read mpa polygon
mpa = reserveffect::read_mpanc()
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
######################################## READ TRANSECT DATA ########################################
points1 = reserveffect::read_transects_points("megafauna1_points_latlon")
library(sp)
pts = points1
sector = "1"
#reproject to wgs84
crs_wgs84 <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
pts2 <- sp::spTransform(pts, crs_wgs84)
#order based on id
pts2@data$id = as.numeric(pts2@data$id)
new = pts2@data[order(pts2@data$id),]
coordinates(new) <- ~ xcoord + ycoord
#add id_line
if (sector == "1") {
new$id_line = paste0("1_", c(rep(1:24, each=2)))
}
if (sector == "2") {
new$id_line = paste0("2_", c(rep(1:33, each=2), 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 41, 42, 41, 42,
43, 44, 43, 44, 45, 46, 45, 46, 47, 48, 47, 48, 49, 50, 49, 50,
51, 52, 51, 52, 53, 54, 53, 54, 55, 56, 55, 56,
57, 58, 57, 58, 59, 60, 59, 60, 61))
}
if (sector == "3") {
new$id_line = paste0("3_", rep(1:168, each=2))
}
#list of Lines per id, each with one Line in a list ********does not work inside function********
x <- lapply(split(new, new$id_line), function(x) Lines(list(Line(coordinates(x))), x$id_line[1L]))
#make spatial lines
lns <- SpatialLines(x)
#make dataframe for the lines groupes by id
data <- data.frame(id = unique(new$id_line))
rownames(data) <- data$id
#make spatial lines data frame
l <- SpatialLinesDataFrame(lns, data)
lines1 = l
####### OSM maps
maplatlon_sm = reserveffect::osm_map(lat1_sm, lon1_sm, lat2_sm, lon2_sm) #bing (satellite view)
###################################### SELECT ON EFFORT TELEMETRY FOR POE #####################################
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
############################################ MAKE DENSITY MAPS ON REGULAR GRID POE ON EFFORT #############################################################
#project osm for density mapping
maplatlon_sm_proj = reserveffect::osm_mapproj(maplatlon_sm)
#make study area grid
grid_sm = reserveffect::make_grid(rast_sm)
#grid cell area
#sf::st_area(grid_sm)
#restrict telemetry to dates
dates = c("2021-07-24", "2021-07-29", "2021-08-08", "2021-08-21", '2021-09-05', "2021-09-12",
"2021-09-14", "2021-10-06", "2021-10-18", "2021-10-23", "2021-10-31", "2021-11-06", "2021-11-10",
"2021-11-11", "2021-11-14", "2021-11-16", "2021-11-23", "2021-11-24", "2021-11-26", "2021-11-29")
telemetry_poe_on = reserveffect::restrict_telem_dates(telemetry_poe_on, dates)
telem = telemetry_poe_on
library(sp)
#set coords
coordinates(telem) = ~ lon + lat
# list of Lines per date, each with one Line in a list
# ***** does not work in function
listlines = lapply(split(telem, telem$date), function(x) Lines(list(Line(coordinates(x))), x$date[1L]))
list_lines = listlines
### Track length
#Sum length of tracks (m) in grid cells per date
grid_tracks_per_date = reserveffect::sum_length_per_grid_per_date(grid_sm, list_lines, dates)
#Total surveyed length
sum(grid_tracks_per_date$length, na.rm=T) #1553071 m
#Mean surveyed length per survey date
sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #77654 m
#Total surveyed area
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) # 137813538 m2
#Mean surveyed area per survey date
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #6890677 m
#Count total number of observations per grid cell per date
grid_obs_per_date = reserveffect::count_obs_per_grid_per_date(grid_sm, telemetry_obs_poe_on)
#Count total number of observations per coral polygon per date
coral_obs_per_date = reserveffect::count_obs_per_coral_poly_per_date(coral_poly, telemetry_obs_poe_on)
############################################ DENSITY COMPARISONS #############################################################
#Make dataframe per grid cell centers (including empty cell centers) of observations, track length and densities per date and per species for POe
df_all_species = reserveffect::make_df_all_species_poe(grid_obs_per_date, grid_tracks_per_date, footprint_width)
# intersect density dataframe with coral and mpa status
# NB dataframe points are intersected with polygons
df_all_species_coral = reserveffect::intersect_df_coral_poly(df_all_species, coral_poly)
df_all_species_allen_coral = reserveffect::intersect_df_allen_coral_poly(df_all_species_coral, allen_coral_poly)
df_all_species_coral_mpa = reserveffect::intersect_df_mpa_poly(df_all_species_coral, mpa_poe)
df_all_species_allen_coral_mpa = reserveffect::intersect_df_mpa_allen_poly(df_all_species_allen_coral, mpa_poe)
#load all functions
devtools::load_all()
make_twoway_test_barplot_allen_coral_mpa_with_all_species(df_all_species_allen_coral_mpa, "Dugong_certain", "Turtle", "Shark", "Round_ray", "Eagle_ray")
#load all functions
devtools::load_all()
make_twoway_test_barplot_allen_coral_mpa_with_all_species(df_all_species_allen_coral_mpa, "Dugong_certain", "Turtle", "Shark", "Round_ray", "Eagle_ray")
#load all functions
devtools::load_all()
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Turtle", img_Turtle)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Shark", img_Shark)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Round_ray", img_Round_ray)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Eagle_ray", img_Eagle_ray)
#load all functions
devtools::load_all()
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Turtle", img_Turtle)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Shark", img_Shark)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Round_ray", img_Round_ray)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Eagle_ray", img_Eagle_ray)
#load all functions
devtools::load_all()
#habitat and mpa with data Allen and megafauna image LOG
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
#load all functions
devtools::load_all()
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
#load all functions
devtools::load_all()
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
#load all functions
devtools::load_all()
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Dugong_certain", img_Dugong_certain)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Turtle", img_Turtle)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Shark", img_Shark)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Round_ray", img_Round_ray)
reserveffect::boxplot_density_allen_coral_mpa_with_megafauna_image_log(df_all_species_allen_coral_mpa, "Eagle_ray", img_Eagle_ray)
usethis::use_package("raster")
#declare package dependancies
usethis::use_package("viridis")
usethis::use_package("OpenStreetMap")
usethis::use_package("dplyr")
usethis::use_package("readr")
usethis::use_package("magrittr")
usethis::use_package("ggplot2")
usethis::use_package("ggforce")
usethis::use_package("forcats")
usethis::use_package("stringr")
usethis::use_package("sf")
usethis::use_package("readxl")
usethis::use_package("here")
usethis::use_package("sp")
usethis::use_package("sf")
usethis::use_package("raster")
usethis::use_package("lubridate")
usethis::use_package("rgeos")
usethis::use_package("rgdal")
usethis::use_package("scales")
usethis::use_package("maptools")
usethis::use_package("ggsn")
usethis::use_package("gridExtra")
usethis::use_package("RColorBrewer")
usethis::use_package("ggpubr")
usethis::use_package("car")
usethis::use_package("ggsignif")
usethis::use_package("rcompanion")
usethis::use_package("png")
usethis::use_package("grid")
usethis::use_package("vegan")
usethis::use_package("cowplot")
#utiliser les pipes dans les fonctions
#usethis::use_pipe() #does not work
library(magrittr)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
######################################## DEFINE STUDY AREA ########################################
#Define study area coordnates
#small region
lat1_sm =  -21.52 ; lat2_sm = -21.65
lon1_sm = 165.225 ; lon2_sm = 165.45
# lat1_sm =  -21.51 ; lat2_sm = -21.66
# lon1_sm = 165.21 ; lon2_sm = 165.45
#big region
lat1_bg =  -21.2 ; lat2_bg = -22
lon1_bg = 164.6 ; lon2_bg = 166
######################################## CALCULATE FLIGHT PARAMETERS ########################################
#image footprint
mean_altitude = 47 # in meters (in ft: 155) from ulm altimeter (gopro altitude unreliable)
fov = 86.7 # field of view in degrees from gopro hero 7 black manual
footprint_width = 2 * tanpi(fov / (2*180)) * mean_altitude # in meters, trigonometry formula
image_height = 1520 #in pixels (2.7k gopro format)
image_width = 2704 #in pixels (2.7k gopro format)
footprint_height = footprint_width * image_height/image_width #in meters
#overlap between successive images (given hyp of linear flight)
mean_speed = 30.55 # in m/s (in km/h: 110) from ulm
frame_per_s = 3 # extraction rate in megafauna-project
overlap = (mean_speed / frame_per_s) / footprint_height
######################################## READ and CLEAN TELEMETRY DATA ########################################
#read telemetry data
telemetry_all = reserveffect::read_telem()
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
#Read video information
videos = reserveffect::read_video_info()
#Clean video information
videos = reserveffect::clean_video_info(videos)
#Join video information to telemetry
telemetry = reserveffect::join_video_info_telem(videos, telemetry)
#Clean duplicated obs from telemetry (takes about 20 minutes to process)
telemetry_obs = reserveffect::clean_duplicated_obs_telemetry(telemetry, overlap, image_height)
#Get list of Poe videos
ls_poe_videos = reserveffect::list_poe_videos(videos)
#select video information for Poe
videos_poe = reserveffect::select_poe_videos(videos, ls_poe_videos)
#Join video information to telemetry
telemetry_poe = reserveffect::join_video_poe_info_telem(videos_poe, telemetry)
#select obs for Poe
telemetry_obs_poe = reserveffect::select_obs_telemetry_poe(telemetry_obs, ls_poe_videos)
#count total number of individuals observed per species
telemetry_obs_poe %>%
dplyr::group_by(object) %>%
dplyr::summarise(n_tot = dplyr::n())
# # #read images png
img_Dugong_certain = reserveffect::read_megafauna_image("Dugong_certain")
img_Turtle = reserveffect::read_megafauna_image("Turtle")
img_Shark = reserveffect::read_megafauna_image("Shark")
img_Round_ray = reserveffect::read_megafauna_image("Round_ray")
img_Eagle_ray = reserveffect::read_megafauna_image("Eagle_ray")
######################################## READ CORAL DATA ########################################
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
#read Allen coral geomorpology polygons benthic
allen_coral_poly = reserveffect::read_crop_and_convert_allen_coralnc_benthic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
#read Allen coral geomorpology polygons geomorphic
allen_coral_poly_geomorphic = reserveffect::read_crop_and_convert_allen_coralnc_geomorphic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
# make coral cover raster
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
######################################## READ MPA DATA ########################################
# read mpa polygon
mpa = reserveffect::read_mpanc()
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
######################################## READ TRANSECT DATA ########################################
points1 = reserveffect::read_transects_points("megafauna1_points_latlon")
library(sp)
pts = points1
sector = "1"
#reproject to wgs84
crs_wgs84 <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
pts2 <- sp::spTransform(pts, crs_wgs84)
#order based on id
pts2@data$id = as.numeric(pts2@data$id)
new = pts2@data[order(pts2@data$id),]
coordinates(new) <- ~ xcoord + ycoord
#add id_line
if (sector == "1") {
new$id_line = paste0("1_", c(rep(1:24, each=2)))
}
if (sector == "2") {
new$id_line = paste0("2_", c(rep(1:33, each=2), 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 41, 42, 41, 42,
43, 44, 43, 44, 45, 46, 45, 46, 47, 48, 47, 48, 49, 50, 49, 50,
51, 52, 51, 52, 53, 54, 53, 54, 55, 56, 55, 56,
57, 58, 57, 58, 59, 60, 59, 60, 61))
}
if (sector == "3") {
new$id_line = paste0("3_", rep(1:168, each=2))
}
#list of Lines per id, each with one Line in a list ********does not work inside function********
x <- lapply(split(new, new$id_line), function(x) Lines(list(Line(coordinates(x))), x$id_line[1L]))
#make spatial lines
lns <- SpatialLines(x)
#make dataframe for the lines groupes by id
data <- data.frame(id = unique(new$id_line))
rownames(data) <- data$id
#make spatial lines data frame
l <- SpatialLinesDataFrame(lns, data)
lines1 = l
####### OSM maps
maplatlon_sm = reserveffect::osm_map(lat1_sm, lon1_sm, lat2_sm, lon2_sm) #bing (satellite view)
###################################### SELECT ON EFFORT TELEMETRY FOR POE #####################################
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
############################################ MAKE DENSITY MAPS ON REGULAR GRID POE ON EFFORT #############################################################
#project osm for density mapping
maplatlon_sm_proj = reserveffect::osm_mapproj(maplatlon_sm)
#make study area grid
grid_sm = reserveffect::make_grid(rast_sm)
#grid cell area
#sf::st_area(grid_sm)
#restrict telemetry to dates
dates = c("2021-07-24", "2021-07-29", "2021-08-08", "2021-08-21", '2021-09-05', "2021-09-12",
"2021-09-14", "2021-10-06", "2021-10-18", "2021-10-23", "2021-10-31", "2021-11-06", "2021-11-10",
"2021-11-11", "2021-11-14", "2021-11-16", "2021-11-23", "2021-11-24", "2021-11-26", "2021-11-29")
telemetry_poe_on = reserveffect::restrict_telem_dates(telemetry_poe_on, dates)
telem = telemetry_poe_on
library(sp)
#set coords
coordinates(telem) = ~ lon + lat
# list of Lines per date, each with one Line in a list
# ***** does not work in function
listlines = lapply(split(telem, telem$date), function(x) Lines(list(Line(coordinates(x))), x$date[1L]))
list_lines = listlines
### Track length
#Sum length of tracks (m) in grid cells per date
grid_tracks_per_date = reserveffect::sum_length_per_grid_per_date(grid_sm, list_lines, dates)
#Total surveyed length
sum(grid_tracks_per_date$length, na.rm=T) #1553071 m
#Mean surveyed length per survey date
sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #77654 m
#Total surveyed area
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) # 137813538 m2
#Mean surveyed area per survey date
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #6890677 m
#Count total number of observations per grid cell per date
grid_obs_per_date = reserveffect::count_obs_per_grid_per_date(grid_sm, telemetry_obs_poe_on)
#Count total number of observations per coral polygon per date
coral_obs_per_date = reserveffect::count_obs_per_coral_poly_per_date(coral_poly, telemetry_obs_poe_on)
############################################ DENSITY COMPARISONS #############################################################
#Make dataframe per grid cell centers (including empty cell centers) of observations, track length and densities per date and per species for POe
df_all_species = reserveffect::make_df_all_species_poe(grid_obs_per_date, grid_tracks_per_date, footprint_width)
# intersect density dataframe with coral and mpa status
# NB dataframe points are intersected with polygons
df_all_species_coral = reserveffect::intersect_df_coral_poly(df_all_species, coral_poly)
df_all_species_allen_coral = reserveffect::intersect_df_allen_coral_poly(df_all_species_coral, allen_coral_poly)
df_all_species_coral_mpa = reserveffect::intersect_df_mpa_poly(df_all_species_coral, mpa_poe)
df_all_species_allen_coral_mpa = reserveffect::intersect_df_mpa_allen_poly(df_all_species_allen_coral, mpa_poe)
# Make two-way non parametric test (scheirerRayHare test) for density per mpa status and Allen coral habitat and barplot of the result
# https://rcompanion.org/handbook/F_14.html
make_twoway_test_barplot_allen_coral_mpa(df_all_species_allen_coral_mpa, "Dugong_certain")
# Barplot with all species : Make two-way non parametric test (scheirerRayHare test) for density per mpa status and Allen coral habitat and barplot of the result
# https://rcompanion.org/handbook/F_14.html
make_twoway_test_barplot_allen_coral_mpa_with_all_species(df_all_species_allen_coral_mpa, "Dugong_certain", "Turtle", "Shark", "Round_ray", "Eagle_ray")
df = df_all_species_allen_coral_mpa
df
View(df)
df %>%
dplyr::mutate(density = get(paste0("density_", species))) %>%
dplyr::mutate(class2 = factor(class, levels = c("Coral/Algae", "Microalgal Mats", "Rock", "Rubble", "Sand", "Seagrass", "Deep_sea"))) -> df
species = "Dugong_certain"
df %>%
dplyr::mutate(density = get(paste0("density_", species))) %>%
dplyr::mutate(class2 = factor(class, levels = c("Coral/Algae", "Microalgal Mats", "Rock", "Rubble", "Sand", "Seagrass", "Deep_sea"))) -> df
df
View(df)
# https://rcompanion.org/handbook/F_14.html
#The Scheirer Ray Hare test is a nonparametric test used for a two-way factorial experiment.
res = rcompanion::scheirerRayHare(density ~ mpa_status + class2, data = df)
res
print(res)
#make dataframe for plotting
new = data.frame(var = c("Mpa", "Habitat", "Mpa * Habitat"),
effect =  res$H[1:3],
pval = res$p.value[1:3])
View(new)
df$class2 = factor(df$class2,
levels = c("Coral/Algae", "Microalgal Mats", "Rock", "Rubble", "Sand", "Seagrass", "Deep_sea"))
df$class2
levels(df$class2)
install.packages("FSA")
library(FSA)
DT = dunnTest(density ~ class2,
data= df,
method="bh")
DT
PT = DT$res
PT
library(rcompanion)
cldList(P.adj ~ Comparison,
data = PT,
threshold = 0.05)
#declare package dependancies
usethis::use_package("viridis")
usethis::use_package("OpenStreetMap")
usethis::use_package("dplyr")
usethis::use_package("readr")
usethis::use_package("magrittr")
usethis::use_package("ggplot2")
usethis::use_package("ggforce")
usethis::use_package("forcats")
usethis::use_package("stringr")
usethis::use_package("sf")
usethis::use_package("readxl")
usethis::use_package("here")
usethis::use_package("sp")
usethis::use_package("sf")
usethis::use_package("raster")
usethis::use_package("lubridate")
usethis::use_package("rgeos")
usethis::use_package("rgdal")
usethis::use_package("scales")
usethis::use_package("maptools")
usethis::use_package("ggsn")
usethis::use_package("gridExtra")
usethis::use_package("RColorBrewer")
usethis::use_package("ggpubr")
usethis::use_package("car")
usethis::use_package("ggsignif")
usethis::use_package("rcompanion")
usethis::use_package("png")
usethis::use_package("grid")
usethis::use_package("vegan")
usethis::use_package("cowplot")
#utiliser les pipes dans les fonctions
#usethis::use_pipe() #does not work
library(magrittr)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
######################################## DEFINE STUDY AREA ########################################
#Define study area coordnates
#small region
lat1_sm =  -21.52 ; lat2_sm = -21.65
lon1_sm = 165.225 ; lon2_sm = 165.45
# lat1_sm =  -21.51 ; lat2_sm = -21.66
# lon1_sm = 165.21 ; lon2_sm = 165.45
#big region
lat1_bg =  -21.2 ; lat2_bg = -22
lon1_bg = 164.6 ; lon2_bg = 166
######################################## CALCULATE FLIGHT PARAMETERS ########################################
#image footprint
mean_altitude = 47 # in meters (in ft: 155) from ulm altimeter (gopro altitude unreliable)
fov = 86.7 # field of view in degrees from gopro hero 7 black manual
footprint_width = 2 * tanpi(fov / (2*180)) * mean_altitude # in meters, trigonometry formula
image_height = 1520 #in pixels (2.7k gopro format)
image_width = 2704 #in pixels (2.7k gopro format)
footprint_height = footprint_width * image_height/image_width #in meters
#overlap between successive images (given hyp of linear flight)
mean_speed = 30.55 # in m/s (in km/h: 110) from ulm
frame_per_s = 3 # extraction rate in megafauna-project
overlap = (mean_speed / frame_per_s) / footprint_height
######################################## READ and CLEAN TELEMETRY DATA ########################################
#read telemetry data
telemetry_all = reserveffect::read_telem()
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
#Read video information
videos = reserveffect::read_video_info()
#Clean video information
videos = reserveffect::clean_video_info(videos)
#Join video information to telemetry
telemetry = reserveffect::join_video_info_telem(videos, telemetry)
#Clean duplicated obs from telemetry (takes about 20 minutes to process)
telemetry_obs = reserveffect::clean_duplicated_obs_telemetry(telemetry, overlap, image_height)
#Get list of Poe videos
ls_poe_videos = reserveffect::list_poe_videos(videos)
#select video information for Poe
videos_poe = reserveffect::select_poe_videos(videos, ls_poe_videos)
#Join video information to telemetry
telemetry_poe = reserveffect::join_video_poe_info_telem(videos_poe, telemetry)
#select obs for Poe
telemetry_obs_poe = reserveffect::select_obs_telemetry_poe(telemetry_obs, ls_poe_videos)
#count total number of individuals observed per species
telemetry_obs_poe %>%
dplyr::group_by(object) %>%
dplyr::summarise(n_tot = dplyr::n())
# # #read images png
img_Dugong_certain = reserveffect::read_megafauna_image("Dugong_certain")
img_Turtle = reserveffect::read_megafauna_image("Turtle")
img_Shark = reserveffect::read_megafauna_image("Shark")
img_Round_ray = reserveffect::read_megafauna_image("Round_ray")
img_Eagle_ray = reserveffect::read_megafauna_image("Eagle_ray")
######################################## READ CORAL DATA ########################################
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
#read Allen coral geomorpology polygons benthic
allen_coral_poly = reserveffect::read_crop_and_convert_allen_coralnc_benthic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
#read Allen coral geomorpology polygons geomorphic
allen_coral_poly_geomorphic = reserveffect::read_crop_and_convert_allen_coralnc_geomorphic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
# make coral cover raster
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
######################################## READ MPA DATA ########################################
# read mpa polygon
mpa = reserveffect::read_mpanc()
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
######################################## READ TRANSECT DATA ########################################
points1 = reserveffect::read_transects_points("megafauna1_points_latlon")
library(sp)

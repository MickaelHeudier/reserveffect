#load all functions
devtools::load_all()
######################################## DEFINE STUDY AREA ########################################
#Define study area coordnates
#small region
lat1_sm =  -21.52 ; lat2_sm = -21.65
lon1_sm = 165.225 ; lon2_sm = 165.45
# lat1_sm =  -21.51 ; lat2_sm = -21.66
# lon1_sm = 165.21 ; lon2_sm = 165.45
#big region
lat1_bg =  -21.2 ; lat2_bg = -22
lon1_bg = 164.6 ; lon2_bg = 166
#nc + australia
lat1_nc = -30 ; lat2_nc = -10
lon1_nc = 140 ; lon2_nc = 170
######################################## CALCULATE FLIGHT PARAMETERS ########################################
#image footprint
mean_altitude = 47 # in meters (in ft: 155) from ulm altimeter (gopro altitude unreliable)
fov = 86.7 # field of view in degrees from gopro hero 7 black manual
footprint_width = 2 * tanpi(fov / (2*180)) * mean_altitude # in meters, trigonometry formula
image_height = 1520 #in pixels (2.7k gopro format)
image_width = 2704 #in pixels (2.7k gopro format)
footprint_height = footprint_width * image_height/image_width #in meters
#overlap between successive images (given hyp of linear flight)
mean_speed = 30.55 # in m/s (in km/h: 110) from ulm
frame_per_s = 3 # extraction rate in megafauna-project
overlap = (mean_speed / frame_per_s) / footprint_height
######################################## READ and CLEAN TELEMETRY DATA ########################################
#read telemetry data
telemetry_all = reserveffect::read_telem()
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
#Read video information
videos = reserveffect::read_video_info()
#Clean video information
videos = reserveffect::clean_video_info(videos)
#Join video information to telemetry
telemetry = reserveffect::join_video_info_telem(videos, telemetry)
#Clean duplicated obs from telemetry (takes about 20 minutes to process)
telemetry_obs = reserveffect::clean_duplicated_obs_telemetry(telemetry, overlap, image_height)
#Get list of Poe videos
ls_poe_videos = reserveffect::list_poe_videos(videos)
#select video information for Poe
videos_poe = reserveffect::select_poe_videos(videos, ls_poe_videos)
#Join video information to telemetry
telemetry_poe = reserveffect::join_video_poe_info_telem(videos_poe, telemetry)
#select obs for Poe
telemetry_obs_poe = reserveffect::select_obs_telemetry_poe(telemetry_obs, ls_poe_videos)
#count total number of individuals observed per species
telemetry_obs_poe %>%
dplyr::group_by(object) %>%
dplyr::summarise(n_tot = dplyr::n())
# # #read images png
img_Dugong_certain = reserveffect::read_megafauna_image("Dugong_certain")
img_Turtle = reserveffect::read_megafauna_image("Turtle")
img_Shark = reserveffect::read_megafauna_image("Shark")
img_Round_ray = reserveffect::read_megafauna_image("Round_ray")
img_Eagle_ray = reserveffect::read_megafauna_image("Eagle_ray")
######################################## READ CORAL DATA ########################################
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
#read Allen coral geomorpology polygons benthic
allen_coral_poly = reserveffect::read_crop_and_convert_allen_coralnc_benthic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
#read Allen coral geomorpology polygons geomorphic
allen_coral_poly_geomorphic = reserveffect::read_crop_and_convert_allen_coralnc_geomorphic(lon1_sm, lon2_sm, lat2_sm, lat1_sm)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
# make coral cover raster
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
######################################## READ MPA DATA ########################################
# read mpa polygon
mpa = reserveffect::read_mpanc()
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
######################################## READ TRANSECT DATA ########################################
points1 = reserveffect::read_transects_points("megafauna1_points_latlon")
library(sp)
pts = points1
sector = "1"
#reproject to wgs84
crs_wgs84 <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
pts2 <- sp::spTransform(pts, crs_wgs84)
#order based on id
pts2@data$id = as.numeric(pts2@data$id)
new = pts2@data[order(pts2@data$id),]
coordinates(new) <- ~ xcoord + ycoord
#add id_line
if (sector == "1") {
new$id_line = paste0("1_", c(rep(1:24, each=2)))
}
if (sector == "2") {
new$id_line = paste0("2_", c(rep(1:33, each=2), 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 41, 42, 41, 42,
43, 44, 43, 44, 45, 46, 45, 46, 47, 48, 47, 48, 49, 50, 49, 50,
51, 52, 51, 52, 53, 54, 53, 54, 55, 56, 55, 56,
57, 58, 57, 58, 59, 60, 59, 60, 61))
}
if (sector == "3") {
new$id_line = paste0("3_", rep(1:168, each=2))
}
#list of Lines per id, each with one Line in a list ********does not work inside function********
x <- lapply(split(new, new$id_line), function(x) Lines(list(Line(coordinates(x))), x$id_line[1L]))
#make spatial lines
lns <- SpatialLines(x)
#make dataframe for the lines groupes by id
data <- data.frame(id = unique(new$id_line))
rownames(data) <- data$id
#make spatial lines data frame
l <- SpatialLinesDataFrame(lns, data)
lines1 = l
####### OSM maps
maplatlon_sm = reserveffect::osm_map(lat1_sm, lon1_sm, lat2_sm, lon2_sm) #bing (satellite view)
###################################### SELECT ON EFFORT TELEMETRY FOR POE #####################################
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
############################################ MAKE DENSITY MAPS ON REGULAR GRID POE ON EFFORT #############################################################
#project osm for density mapping
maplatlon_sm_proj = reserveffect::osm_mapproj(maplatlon_sm)
#make study area grid
grid_sm = reserveffect::make_grid(rast_sm)
#grid cell area
#sf::st_area(grid_sm)
#restrict telemetry to dates
dates = c("2021-07-24", "2021-07-29", "2021-08-08", "2021-08-21", '2021-09-05', "2021-09-12",
"2021-09-14", "2021-10-06", "2021-10-18", "2021-10-23", "2021-10-31", "2021-11-06", "2021-11-10",
"2021-11-11", "2021-11-14", "2021-11-16", "2021-11-23", "2021-11-24", "2021-11-26", "2021-11-29")
telemetry_poe_on = reserveffect::restrict_telem_dates(telemetry_poe_on, dates)
telem = telemetry_poe_on
library(sp)
#set coords
coordinates(telem) = ~ lon + lat
# list of Lines per date, each with one Line in a list
# ***** does not work in function
listlines = lapply(split(telem, telem$date), function(x) Lines(list(Line(coordinates(x))), x$date[1L]))
list_lines = listlines
### Track length
#Sum length of tracks (m) in grid cells per date
grid_tracks_per_date = reserveffect::sum_length_per_grid_per_date(grid_sm, list_lines, dates)
#Total surveyed length
sum(grid_tracks_per_date$length, na.rm=T) #1553071 m
#Mean surveyed length per survey date
sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #77654 m
#Total surveyed area
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) # 137813538 m2
#Mean surveyed area per survey date
footprint_width * sum(grid_tracks_per_date$length, na.rm=T) / length(dates) #6890677 m
### Observations
#Count total number of observations per grid cell per date
grid_obs_per_date = reserveffect::count_obs_per_grid_per_date(grid_sm, telemetry_obs_poe_on)
### Observations
#Count total number of observations per coral polygon per date
coral_obs_per_date = reserveffect::count_obs_per_coral_poly_per_date(coral_poly, telemetry_obs_poe_on)
############################################ DENSITY COMPARISONS #############################################################
#Make dataframe per grid cell centers (including empty cell centers) of observations, track length and densities per date and per species for POe
df_all_species = reserveffect::make_df_all_species_poe(grid_obs_per_date, grid_tracks_per_date, footprint_width)
# intersect density dataframe with coral and mpa status
# NB dataframe points are intersected with polygons
df_all_species_coral = reserveffect::intersect_df_coral_poly(df_all_species, coral_poly)
df_all_species_allen_coral = reserveffect::intersect_df_allen_coral_poly(df_all_species_coral, allen_coral_poly)
df_all_species_coral_mpa = reserveffect::intersect_df_mpa_poly(df_all_species_coral, mpa_poe)
df_all_species_allen_coral_mpa = reserveffect::intersect_df_mpa_allen_poly(df_all_species_allen_coral, mpa_poe)
View(df_all_species_coral)
View(df_all_species_allen_coral)
View(df_all_species)
maplatlonproj = maplatlon_sm_proj
polytracks = grid_tracks_per_date
polygon = grid_obs_per_date
species = "Shark"
pa = mpa_poe
img = img_Dugong_certain
# select polygons with counts > 0 for species
polygon2 = polygon %>%
dplyr::filter(object == species)
# convert back to spatial object for plotting
polygon3 = sf::as_Spatial(polygon2)
# make dataframe for plotting
counts = data.frame(id = polygon3$id,
count = polygon3$n,
date = polygon3$date,
lon = coordinates(polygon3)[,1],
lat = coordinates(polygon3)[,2])
#group id, lat, lon
counts2 = counts %>%
dplyr::group_by(id, lat, lon)
#count number of dates where there are observations per pixels
counts3 = counts2 %>%
dplyr::count(id) %>%
#frequence = nbr surveyw with sightings / nbr surveys
dplyr::mutate(freq = n/20)
View(counts3)
View(counts2)
View(counts3)
polygon
View(polygon)
# select polygons with counts > 0 for species
polygon2 = polygon %>%
dplyr::filter(object == species)
View(polygon2)
# convert back to spatial object for plotting
polygon3 = sf::as_Spatial(polygon2)
View(polygon3)
ggplot2::ggplot(counts2, ggplot2::aes(x = date, y = count)) + ggplot2::geom_point()
counts_test = counts2 %>%
dplyr::count(date)
View(counts_test)
counts_test = counts2 %>%
dplyr::group_by(date, count) %>%
dplyr::count(date)
View(counts_test)
counts_test = counts2 %>%
dplyr::group_by(date, count) %>%
dplyr::sum(date)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
#list all csv files in the telemetry folder
filenames = list.files(here::here("data/telemetry"), pattern="csv")
View(filenames)
filenames
telemlist = list()
telemlist
for (i in 1:length(filenames)) {
#read telemetry data from filename
telem = readr::read_delim(here::here("data/telemetry", filenames[i]),
delim = ";",
local = readr::locale(decimal_mark = "."),
col_types = list(readr::col_double(), readr::col_double(), readr::col_double(), readr::col_double(),
readr::col_character(), readr::col_character(), readr::col_character(), readr::col_character(),
readr::col_character()))
#extract video_id from filename
video_id = stringr::str_sub(filenames[i], 1, 8)
#format telemetry data
telem %>%
#add video_id as column
dplyr::mutate(video_id = video_id) %>%
#make image_id based on the video_id
dplyr::mutate(image_id = paste(video_id, frame, sep="_")) -> telem_new
telemlist[[i]] = telem_new # add it to list
}
#extract video_id from filename
video_id = stringr::str_sub(filenames[i], 1, 8)
View(video_id)
#format telemetry data
telem %>%
#add video_id as column
dplyr::mutate(video_id = video_id) %>%
#make image_id based on the video_id
dplyr::mutate(image_id = paste(video_id, frame, sep="_")) -> telem_new
View(telem_new)
telemlist[[i]] = telem_new # add it to list
telemlist
#append all telemetry data
telem = dplyr::bind_rows(telemlist)
View(telem)
#read telemetry data
telemetry_all = reserveffect::read_telem()
telem = telemetry_all
lat1 = lat1_bg
lon1 = lon1_bg
lat2 = lat2_bg
lon2 = lon2_bg
#remove points outside region
telem %>%
dplyr::filter(lon > lon1 & lon < lon2 & lat < lat1 & lat > lat2) -> telem_new
View(telem_new)
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
vid = readxl::read_excel(here::here("data/telemetry/", "informations vidéo_ulm_news.xlsx"))
View(vid)
#Read video information
videos = reserveffect::read_video_info()
vid %>%
dplyr::select(DATE, VIDEO_ID, EFFORT_POE) %>%
#convert column names to lower case
dplyr::rename_with(tolower) %>%
dplyr::mutate(date = as.factor(date)) %>%
tidyr::drop_na(date) -> vid_new
View(vid)
View(vid_new)
View(videos)
#Read video information from google sheets (informations_video_ulm_news)
videos = reserveffect::read_video_info()
#Clean video information : select only DATE, VIDEO_ID, EFFORT_POE
videos = reserveffect::clean_video_info(videos)
View(videos)
View(telemetry)
joined = dplyr::left_join(telem, vid, by = "video_id")
#clean telemetry data
telemetry = reserveffect::clean_telem(telemetry_all, lat1_bg, lon1_bg, lat2_bg, lon2_bg)
#Read video information from google sheets (informations_video_ulm_news)
videos = reserveffect::read_video_info()
#Clean video information : select only DATE, VIDEO_ID, EFFORT_POE
videos = reserveffect::clean_video_info(videos)
#Join video information to telemetry
telemetry = reserveffect::join_video_info_telem(videos, telemetry)
vid = videos
telem = telemetry
joined = dplyr::left_join(telem, vid, by = "video_id")
View(joined)
telem = telemetry
overl = overlap
im_height = image_height
telem %>%
#calculate y coordinate of object center
dplyr::mutate(center_y = as.numeric(start_y) + (as.numeric(end_y) - as.numeric(start_y))/2) %>%
#drops lines with no object
tidyr::drop_na(object) %>%
#drops coral and plane shadow
dplyr::filter(!object %in% c("Coral", "Plane_shadow"))  -> telem2
#define overlap height window
#ie height in pixels that corresponds to overlapping portions of consecutive images
window = overl * im_height
i=1
#get image_id for consecutive images
img = telem2$image_id[i]
img2 = paste0(sub("_.*", "", img), "_", as.numeric(sub(".*_", "", img))+1)
#get corresponding data subsets
sub_1 = subset(telem2, telem2$image_id == img)
sub_2 = subset(telem2, telem2$image_id == img2)
#loops on data subsets
for (j in 1:nrow(sub_2)){
print(j)
for (k in 1:nrow(sub_1)){
print(k)
#if the same object is annotated in consecutive images
if (sub_2$object[j] == sub_1$object[k]){
#if y_center of the object in image2 is within that window of y_center of the object image1
#the object in image2 is a duplicate
if (sub_2$center_y[j] >  sub_1$center_y[k] - window &
sub_2$center_y[j] <  sub_1$center_y[k] + window){
print("object within window")
sub_1$duplicate[k] = "no"
sub_2$duplicate[j] = "yes"
}
}
}
}
#bind
sub = rbind(sub_1, sub_2)
for (i in 2:(nrow(telem2)-1)){
cat("------------", i, "\n")
#get image_id for consecutive images
img = telem2$image_id[i]
img2 = paste0(sub("_.*", "", img), "_", as.numeric(sub(".*_", "", img))+1)
#get corresponding data subsets
sub_1 = subset(telem2, telem2$image_id == img)
sub_2 = subset(telem2, telem2$image_id == img2)
#apply treatment if sub_2 exists (ie image_id are consecutive)
if (nrow(sub_2) !=0) {
cat("consecutive image_id \n")
#loops on data subsets
for (j in 1:nrow(sub_2)){
print(j)
for (k in 1:nrow(sub_1)){
print(k)
#initialize
sub_1$duplicate[k] = "no"
#if the same object is annotated in consecutive images
if (sub_2$object[j] == sub_1$object[k]){
print("same object")
#if y_center of the object in image2 is within that window of y_center of the object image1
#the object in image2 is a duplicate
if (sub_2$center_y[j] >  sub_1$center_y[k] - window &
sub_2$center_y[j] <  sub_1$center_y[k] + window){
print("object within window")
sub_2$duplicate[j] = "yes"
}else{ #####added
print("object not within window")
sub_2$duplicate[j] = "no"
}
}else{
print("different object")
sub_2$duplicate[j] = "no"
}
}
}
#bind
sub = rbind(sub, sub_1, sub_2)
}else{
cat("non consecutive image_id \n")
sub_1$duplicate = "no"
sub = rbind(sub, sub_1)
}
}
sub %>%
dplyr::distinct() -> sub1
sub1 %>%
dplyr::distinct(frame, lat, lon, alt, object, start_x, start_y, end_x, end_y, video_id, image_id, .keep_all = TRUE) -> sub2
#### print table
print(table(sub2$duplicate, sub2$object))
sub2 %>%
dplyr::filter(duplicate == "no") -> sub_unique
return(sub_unique)
vid %>%
dplyr::filter(effort_poe == "OUI") -> vid_poe
View(vid_poe)
ls = vid_poe$video_id
ls
View(videos)
vid %>%
dplyr::filter(video_id %in% list) -> vid_poe
View(vid_poe)
vid = videos
#Get list of Poe videos
ls_poe_videos = reserveffect::list_poe_videos(videos)
list = ls_poe_videos
vid %>%
dplyr::filter(video_id %in% list) -> vid_poe
View(vid_poe)
dplyr::right_join(telem, vid, by = "video_id") %>%
dplyr::select(-c(date.y, effort_poe.y)) %>%
dplyr::rename(date = date.x) %>%
dplyr::rename(effort_poe = effort_poe.x) -> joined
View(joined)
#select video information for Poe
videos_poe = reserveffect::select_poe_videos(videos, ls_poe_videos)
#Join video information to telemetry
telemetry_poe = reserveffect::join_video_poe_info_telem(videos_poe, telemetry)
telem_obs %>%
dplyr::filter(video_id %in% ls_poe_vids) -> telem_obs_new
#select obs for Poe
telemetry_obs_poe = reserveffect::select_obs_telemetry_poe(telemetry_obs, ls_poe_videos)
View(telemetry_obs_poe)
#count total number of individuals observed per species
telemetry_obs_poe %>%
dplyr::group_by(object) %>%
dplyr::summarise(n_tot = dplyr::n())
# read coral geomorpology polygons
#adapt news polygons
coral_poly = reserveffect::read_coralnc()
View(coral_poly)
# make study area raster (resolution 0.001 degrees)
rast_sm = reserveffect::make_area_raster(lat1_sm, lon1_sm, lat2_sm, lon2_sm, 0.0025)
View(rast_sm)
rast_sm
plot(raster_sm)
plot(rast_sm)
# create raster for study area
r = raster::raster(ext = raster::extent(lon1, lon2, lat2, lat1), resolution = res) #resolution in degrees
lat1 = lat1_sm
lon1 = lon1_sm
lat2 = lat2_sm
lon2 = lon2_sm
res = 0.0025
# create raster for study area
r = raster::raster(ext = raster::extent(lon1, lon2, lat2, lat1), resolution = res) #resolution in degrees
r
plot(r)
raster::values(r) = 1:raster::ncell(r)
# make coral cover raster : not used
coral_cover_sm = reserveffect::make_coral_cover_raster(coral_poly, rast_sm)
# extract mpa polygon for poe
mpa_poe = reserveffect::extract_mpa_poe(mpa)
# Read 3 shapefiles of new caledonia mpas
shp0 <- rgdal::readOGR(dsn = here::here("data/mpas/shp_0", "WDPA_WDOECM_Mar2021_Public_NCL_shp-polygons.shp"))
shp1 <- rgdal::readOGR(dsn = here::here("data/mpas/shp_1", "WDPA_WDOECM_Mar2021_Public_NCL_shp-polygons.shp"))
shp2 <- rgdal::readOGR(dsn = here::here("data/mpas/shp_2", "WDPA_WDOECM_Mar2021_Public_NCL_shp-polygons.shp"))
# Merge
shp = rbind(shp0, shp1, shp2)
shp
###### Map coral polygons
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l1_attrib", "small")
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l2_attrib", "small")
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l3_attrib", "small")
reserveffect::map_coral_poly(maplatlon_sm, coral_poly, "l4_attrib", "small")
#map telemetry with separate map per date
map_telemetry_date_separate_on_off(maplatlon_sm, telemetry_poe, telemetry_poe_on, "small", just_poe = TRUE)
#read off effort portions Poe
off_effort = reserveffect::read_off_effort_poe()
#clean effort portions related to transit Poe
off_effort_transit = reserveffect::clean_off_effort_transit_poe(off_effort)
#clean effort portions related to loop Poe
off_effort_loop = reserveffect::clean_off_effort_loop_poe(off_effort)
#select on effort telemetry and observations Poe
telemetry_poe_on = reserveffect::select_on_effort_poe(telemetry_poe, off_effort_transit, off_effort_loop)
telemetry_obs_poe_on = reserveffect::select_on_effort_poe(telemetry_obs_poe, off_effort_transit, off_effort_loop)
#Convert telemetry (all) to spatialpoints dataframe
telemetry_poe_sp = reserveffect::convert_telemetry_spatial(telemetry_poe)
#Convert telemetry (on effort) to spatialpoints dataframe
telemetry_poe_on_sp = reserveffect::convert_telemetry_spatial(telemetry_poe_on)
#map telemetry with separate map per date
map_telemetry_date_separate_on_off(maplatlon_sm, telemetry_poe, telemetry_poe_on, "small", just_poe = TRUE)
##### Map MPAs : not used
reserveffect::map_mpa(maplatlon_sm, mpa, "small")
###### telemetry with all species Poe on effort
reserveffect::map_all_species_telemetry_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
###### telemetry with individual species Poe on effort
reserveffect::map_indiv_species_telemetry_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
###### telemetry with individual species with separate map per species Poe on effort
reserveffect::map_indiv_species_telemetry_separate_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
###### telemetry with one color per date Poe on effort
reserveffect::map_telemetry_date_poe_on(maplatlon_sm, telemetry_poe_on)
###### telemetry with separate map per date Poe on effort
reserveffect::map_telemetry_date_separate_poe_on(maplatlon_sm, telemetry_poe_on)
#update NAMESPACE and add .Rd file for each function in man folder
devtools::document()
#load all functions
devtools::load_all()
###### telemetry with all species Poe on effort
reserveffect::map_all_species_telemetry_poe_on(maplatlon_sm, telemetry_poe_on, telemetry_obs_poe_on)
